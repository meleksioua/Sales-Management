#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sale_Management
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GestionVente")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCategorie(Categorie instance);
    partial void UpdateCategorie(Categorie instance);
    partial void DeleteCategorie(Categorie instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCommande(Commande instance);
    partial void UpdateCommande(Commande instance);
    partial void DeleteCommande(Commande instance);
    partial void InsertVente(Vente instance);
    partial void UpdateVente(Vente instance);
    partial void DeleteVente(Vente instance);
    partial void InsertProduit(Produit instance);
    partial void UpdateProduit(Produit instance);
    partial void DeleteProduit(Produit instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GestionVenteConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Categorie> Categories
		{
			get
			{
				return this.GetTable<Categorie>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Commande> Commandes
		{
			get
			{
				return this.GetTable<Commande>();
			}
		}
		
		public System.Data.Linq.Table<Vente> Ventes
		{
			get
			{
				return this.GetTable<Vente>();
			}
		}
		
		public System.Data.Linq.Table<Produit> Produits
		{
			get
			{
				return this.GetTable<Produit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categorie")]
	public partial class Categorie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_categorie;
		
		private string _Libelle;
		
		private EntitySet<Produit> _Produits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_categorieChanging(int value);
    partial void OnId_categorieChanged();
    partial void OnLibelleChanging(string value);
    partial void OnLibelleChanged();
    #endregion
		
		public Categorie()
		{
			this._Produits = new EntitySet<Produit>(new Action<Produit>(this.attach_Produits), new Action<Produit>(this.detach_Produits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_categorie", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_categorie
		{
			get
			{
				return this._Id_categorie;
			}
			set
			{
				if ((this._Id_categorie != value))
				{
					this.OnId_categorieChanging(value);
					this.SendPropertyChanging();
					this._Id_categorie = value;
					this.SendPropertyChanged("Id_categorie");
					this.OnId_categorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Libelle", DbType="VarChar(50)")]
		public string Libelle
		{
			get
			{
				return this._Libelle;
			}
			set
			{
				if ((this._Libelle != value))
				{
					this.OnLibelleChanging(value);
					this.SendPropertyChanging();
					this._Libelle = value;
					this.SendPropertyChanged("Libelle");
					this.OnLibelleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categorie_Produit", Storage="_Produits", ThisKey="Id_categorie", OtherKey="Id_categorie")]
		public EntitySet<Produit> Produits
		{
			get
			{
				return this._Produits;
			}
			set
			{
				this._Produits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Produits(Produit entity)
		{
			this.SendPropertyChanging();
			entity.Categorie = this;
		}
		
		private void detach_Produits(Produit entity)
		{
			this.SendPropertyChanging();
			entity.Categorie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Client;
		
		private string _Nom;
		
		private string _Prenom;
		
		private EntitySet<Commande> _Commandes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_ClientChanging(int value);
    partial void OnId_ClientChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    #endregion
		
		public Client()
		{
			this._Commandes = new EntitySet<Commande>(new Action<Commande>(this.attach_Commandes), new Action<Commande>(this.detach_Commandes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Client", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Client
		{
			get
			{
				return this._Id_Client;
			}
			set
			{
				if ((this._Id_Client != value))
				{
					this.OnId_ClientChanging(value);
					this.SendPropertyChanging();
					this._Id_Client = value;
					this.SendPropertyChanged("Id_Client");
					this.OnId_ClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50)")]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(50)")]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Commande", Storage="_Commandes", ThisKey="Id_Client", OtherKey="Id_client")]
		public EntitySet<Commande> Commandes
		{
			get
			{
				return this._Commandes;
			}
			set
			{
				this._Commandes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commandes(Commande entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Commandes(Commande entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Commande")]
	public partial class Commande : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_commande;
		
		private System.Nullable<System.DateTime> _Date;
		
		private int _Id_client;
		
		private EntitySet<Vente> _Ventes;
		
		private EntityRef<Client> _Client;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_commandeChanging(int value);
    partial void OnId_commandeChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnId_clientChanging(int value);
    partial void OnId_clientChanged();
    #endregion
		
		public Commande()
		{
			this._Ventes = new EntitySet<Vente>(new Action<Vente>(this.attach_Ventes), new Action<Vente>(this.detach_Ventes));
			this._Client = default(EntityRef<Client>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_commande", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_commande
		{
			get
			{
				return this._Id_commande;
			}
			set
			{
				if ((this._Id_commande != value))
				{
					this.OnId_commandeChanging(value);
					this.SendPropertyChanging();
					this._Id_commande = value;
					this.SendPropertyChanged("Id_commande");
					this.OnId_commandeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_client", DbType="Int NOT NULL")]
		public int Id_client
		{
			get
			{
				return this._Id_client;
			}
			set
			{
				if ((this._Id_client != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_clientChanging(value);
					this.SendPropertyChanging();
					this._Id_client = value;
					this.SendPropertyChanged("Id_client");
					this.OnId_clientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commande_Vente", Storage="_Ventes", ThisKey="Id_commande", OtherKey="Id_commande")]
		public EntitySet<Vente> Ventes
		{
			get
			{
				return this._Ventes;
			}
			set
			{
				this._Ventes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Commande", Storage="_Client", ThisKey="Id_client", OtherKey="Id_Client", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Commandes.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Commandes.Add(this);
						this._Id_client = value.Id_Client;
					}
					else
					{
						this._Id_client = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ventes(Vente entity)
		{
			this.SendPropertyChanging();
			entity.Commande = this;
		}
		
		private void detach_Ventes(Vente entity)
		{
			this.SendPropertyChanging();
			entity.Commande = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vente")]
	public partial class Vente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_vente;
		
		private System.Nullable<double> _Mantant;
		
		private System.Nullable<int> _Qte;
		
		private int _Id_produit;
		
		private int _Id_commande;
		
		private EntityRef<Commande> _Commande;
		
		private EntityRef<Produit> _Produit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_venteChanging(int value);
    partial void OnId_venteChanged();
    partial void OnMantantChanging(System.Nullable<double> value);
    partial void OnMantantChanged();
    partial void OnQteChanging(System.Nullable<int> value);
    partial void OnQteChanged();
    partial void OnId_produitChanging(int value);
    partial void OnId_produitChanged();
    partial void OnId_commandeChanging(int value);
    partial void OnId_commandeChanged();
    #endregion
		
		public Vente()
		{
			this._Commande = default(EntityRef<Commande>);
			this._Produit = default(EntityRef<Produit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_vente", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_vente
		{
			get
			{
				return this._Id_vente;
			}
			set
			{
				if ((this._Id_vente != value))
				{
					this.OnId_venteChanging(value);
					this.SendPropertyChanging();
					this._Id_vente = value;
					this.SendPropertyChanged("Id_vente");
					this.OnId_venteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mantant", DbType="Float")]
		public System.Nullable<double> Mantant
		{
			get
			{
				return this._Mantant;
			}
			set
			{
				if ((this._Mantant != value))
				{
					this.OnMantantChanging(value);
					this.SendPropertyChanging();
					this._Mantant = value;
					this.SendPropertyChanged("Mantant");
					this.OnMantantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qte", DbType="Int")]
		public System.Nullable<int> Qte
		{
			get
			{
				return this._Qte;
			}
			set
			{
				if ((this._Qte != value))
				{
					this.OnQteChanging(value);
					this.SendPropertyChanging();
					this._Qte = value;
					this.SendPropertyChanged("Qte");
					this.OnQteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_produit", DbType="Int NOT NULL")]
		public int Id_produit
		{
			get
			{
				return this._Id_produit;
			}
			set
			{
				if ((this._Id_produit != value))
				{
					if (this._Produit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_produitChanging(value);
					this.SendPropertyChanging();
					this._Id_produit = value;
					this.SendPropertyChanged("Id_produit");
					this.OnId_produitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_commande", DbType="Int NOT NULL")]
		public int Id_commande
		{
			get
			{
				return this._Id_commande;
			}
			set
			{
				if ((this._Id_commande != value))
				{
					if (this._Commande.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_commandeChanging(value);
					this.SendPropertyChanging();
					this._Id_commande = value;
					this.SendPropertyChanged("Id_commande");
					this.OnId_commandeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commande_Vente", Storage="_Commande", ThisKey="Id_commande", OtherKey="Id_commande", IsForeignKey=true)]
		public Commande Commande
		{
			get
			{
				return this._Commande.Entity;
			}
			set
			{
				Commande previousValue = this._Commande.Entity;
				if (((previousValue != value) 
							|| (this._Commande.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commande.Entity = null;
						previousValue.Ventes.Remove(this);
					}
					this._Commande.Entity = value;
					if ((value != null))
					{
						value.Ventes.Add(this);
						this._Id_commande = value.Id_commande;
					}
					else
					{
						this._Id_commande = default(int);
					}
					this.SendPropertyChanged("Commande");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Produit_Vente", Storage="_Produit", ThisKey="Id_produit", OtherKey="Id_Produit", IsForeignKey=true)]
		public Produit Produit
		{
			get
			{
				return this._Produit.Entity;
			}
			set
			{
				Produit previousValue = this._Produit.Entity;
				if (((previousValue != value) 
							|| (this._Produit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Produit.Entity = null;
						previousValue.Ventes.Remove(this);
					}
					this._Produit.Entity = value;
					if ((value != null))
					{
						value.Ventes.Add(this);
						this._Id_produit = value.Id_Produit;
					}
					else
					{
						this._Id_produit = default(int);
					}
					this.SendPropertyChanged("Produit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Produit")]
	public partial class Produit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id_Produit;
		
		private string _Libelle;
		
		private System.Nullable<float> _Prix;
		
		private string _Description;
		
		private int _Id_categorie;
		
		private EntitySet<Vente> _Ventes;
		
		private EntityRef<Categorie> _Categorie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnId_ProduitChanging(int value);
    partial void OnId_ProduitChanged();
    partial void OnLibelleChanging(string value);
    partial void OnLibelleChanged();
    partial void OnPrixChanging(System.Nullable<float> value);
    partial void OnPrixChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnId_categorieChanging(int value);
    partial void OnId_categorieChanged();
    #endregion
		
		public Produit()
		{
			this._Ventes = new EntitySet<Vente>(new Action<Vente>(this.attach_Ventes), new Action<Vente>(this.detach_Ventes));
			this._Categorie = default(EntityRef<Categorie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Produit", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id_Produit
		{
			get
			{
				return this._Id_Produit;
			}
			set
			{
				if ((this._Id_Produit != value))
				{
					this.OnId_ProduitChanging(value);
					this.SendPropertyChanging();
					this._Id_Produit = value;
					this.SendPropertyChanged("Id_Produit");
					this.OnId_ProduitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Libelle", DbType="VarChar(50)")]
		public string Libelle
		{
			get
			{
				return this._Libelle;
			}
			set
			{
				if ((this._Libelle != value))
				{
					this.OnLibelleChanging(value);
					this.SendPropertyChanging();
					this._Libelle = value;
					this.SendPropertyChanged("Libelle");
					this.OnLibelleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prix", DbType="Float")]
		public System.Nullable<float> Prix
		{
			get
			{
				return this._Prix;
			}
			set
			{
				if ((this._Prix != value))
				{
					this.OnPrixChanging(value);
					this.SendPropertyChanging();
					this._Prix = value;
					this.SendPropertyChanged("Prix");
					this.OnPrixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_categorie", DbType="Int NOT NULL")]
		public int Id_categorie
		{
			get
			{
				return this._Id_categorie;
			}
			set
			{
				if ((this._Id_categorie != value))
				{
					if (this._Categorie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_categorieChanging(value);
					this.SendPropertyChanging();
					this._Id_categorie = value;
					this.SendPropertyChanged("Id_categorie");
					this.OnId_categorieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Produit_Vente", Storage="_Ventes", ThisKey="Id_Produit", OtherKey="Id_produit")]
		public EntitySet<Vente> Ventes
		{
			get
			{
				return this._Ventes;
			}
			set
			{
				this._Ventes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categorie_Produit", Storage="_Categorie", ThisKey="Id_categorie", OtherKey="Id_categorie", IsForeignKey=true)]
		public Categorie Categorie
		{
			get
			{
				return this._Categorie.Entity;
			}
			set
			{
				Categorie previousValue = this._Categorie.Entity;
				if (((previousValue != value) 
							|| (this._Categorie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categorie.Entity = null;
						previousValue.Produits.Remove(this);
					}
					this._Categorie.Entity = value;
					if ((value != null))
					{
						value.Produits.Add(this);
						this._Id_categorie = value.Id_categorie;
					}
					else
					{
						this._Id_categorie = default(int);
					}
					this.SendPropertyChanged("Categorie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ventes(Vente entity)
		{
			this.SendPropertyChanging();
			entity.Produit = this;
		}
		
		private void detach_Ventes(Vente entity)
		{
			this.SendPropertyChanging();
			entity.Produit = null;
		}
	}
}
#pragma warning restore 1591
